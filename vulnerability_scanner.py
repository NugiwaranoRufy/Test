import nmap
import joblib
import numpy as np
import os
import json
import logging
from concurrent.futures import ThreadPoolExecutor
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def setup_logging():
    logging.basicConfig(filename='scanner.log', level=logging.INFO, 
                        format='%(asctime)s - %(levelname)s - %(message)s')

def scan_network(target):
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments='-T4 -p 1-65535')  # Scans all ports
    
    scan_results = []
    for host in scanner.all_hosts():
        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            for port in ports:
                state = scanner[host][proto][port]['state']
                scan_results.append([port, 1 if state == 'open' else 0])
    
    return scan_results

def train_vulnerability_model():
    X = np.array([[80, 1], [443, 1], [22, 1], [3306, 1], [3389, 1], [21, 1], [8080, 1], [25, 1], [445, 1], [23, 1],
                  [53, 1], [110, 1], [137, 1], [161, 1], [162, 1], [500, 1], [1433, 1], [5900, 1], [6667, 1], [1521, 1],
                  [1723, 1], [5000, 1], [5432, 1], [8081, 1], [8443, 1]])
    y = np.array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                  1, 1, 1, 0, 0, 1])
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=500, max_depth=10, random_state=42, n_jobs=-1)
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred) * 100
    logging.info(f"Model Accuracy: {accuracy:.2f}%")
    print(f"Model Accuracy: {accuracy:.2f}%")
    
    joblib.dump(model, 'vuln_scanner_model.pkl')
    logging.info("Model saved successfully.")
    print("Model saved successfully.")

def predict_vulnerabilities(scan_results):
    if not os.path.exists('vuln_scanner_model.pkl'):
        logging.warning("Model not found. Training a new one.")
        print("Model not found. Training a new one.")
        train_vulnerability_model()
    
    model = joblib.load('vuln_scanner_model.pkl')
    scan_data = np.array(scan_results)
    predictions = model.predict(scan_data)
    
    vulnerabilities = []
    for i, result in enumerate(scan_results):
        port, status = result
        vulnerability = 'VULNERABLE' if predictions[i] == 1 else 'SAFE'
        vulnerabilities.append({"port": port, "status": vulnerability})
        logging.info(f"Port {port}: {vulnerability}")
        print(f"Port {port}: {vulnerability}")
    
    with open("scan_results.json", "w") as f:
        json.dump(vulnerabilities, f, indent=4)
    logging.info("Results saved to scan_results.json")
    print("Results saved to scan_results.json")

def multi_target_scan(targets):
    results = {}
    with ThreadPoolExecutor(max_workers=4) as executor:
        future_to_target = {executor.submit(scan_network, target): target for target in targets}
        for future in future_to_target:
            target = future_to_target[future]
            try:
                results[target] = future.result()
            except Exception as e:
                logging.error(f"Error scanning {target}: {e}")
                results[target] = []
    return results

if __name__ == "__main__":
    setup_logging()
    targets = input("Enter target IPs or domains (comma-separated): ").split(',')
    scan_results = multi_target_scan(targets)
    
    for target, results in scan_results.items():
        print(f"\nScanning results for {target}:")
        predict_vulnerabilities(results)
